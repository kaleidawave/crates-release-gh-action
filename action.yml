name: "crates-release"
description: "Increment crate version and release on crates.io"
branding:
  icon: arrow-up-circle
  color: red
author: kaleidawave

inputs:
  version:
    description: "version to release under. can be major/minor/patch or semver. defaults to patch"
    required: false
    default: "patch"
  crates-token:
    description: "crates.io token for publishing"
    required: true
  working-directory:
    description: "directory which Cargo.toml is under"
    required: false
    default: "."

outputs:
  new-version:
    description: "New version released under"
    value: ${{ steps.set-output.outputs.new-version }}

runs:
  using: "composite"
  steps:
    - id: check-repo-is-not-initialized
      run: echo "::set-output name=remote-url::$( git config --get remote.origin.url )"
      shell: bash
    - uses: actions/checkout@v2
      if: ${{ !contains(steps.check-repo-is-not-initialized.outputs.remote-url, github.repository) }}
    - name: Install cargo edit
      run: |
        echo "::group::Installing cargo edit"
        brew install cargo-edit
        echo "::endgroup::"
      shell: bash
    - name: Set version bump
      if: ${{ contains(fromJSON('["major","minor","patch","release","rc","beta","alpha"]'), inputs.version) }}
      run: >
        echo "NEW_CRATE_VERSION=$( 
         (cargo set-version --bump ${{ inputs.version }} 2>&1) | awk 'NR==1 {print $NF}' 
        )" >> $GITHUB_ENV
      shell: bash
      working-directory: ${{ inputs.working-directory }}
    - name: Set version semver
      if: ${{ !contains(fromJSON('["major","minor","patch","release","rc","beta","alpha"]'), inputs.version) }}
      run: >
        echo "NEW_CRATE_VERSION=$( 
         (cargo set-version ${{ inputs.version }} 2>&1) | awk 'NR==1 {print $NF}' 
        )" >> $GITHUB_ENV
      shell: bash
      working-directory: ${{ inputs.working-directory }}
    - name: Check that version is set
      if: env.NEW_CRATE_VERSION == ''
      uses: actions/github-script@v6
      with:
        script: core.setFailed('Error setting the new version')
    - name: Publish on crates.io
      run: |
        echo "::group::Cargo publish"
        cargo publish --allow-dirty
        echo "::endgroup::"
      env:
        CARGO_REGISTRY_TOKEN: ${{ inputs.crates-token }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
    - id: set-output
      run: echo "::set-output name=new-version::${{ env.NEW_CRATE_VERSION }}"
      shell: bash
